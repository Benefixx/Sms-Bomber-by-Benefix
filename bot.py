import asyncio
import json
import sqlite3
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
from pyqiwip2p import QiwiP2P
import requests
from aiogram import *
from loguru import logger
import random
from kb import keyboards
from aiogram.types import *
from datetime import datetime
import datetime
from dateutil.relativedelta import *
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

# —Å–¥–µ–ª–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–ø–∞–º–∞ !

path_db = "database.db"
with open("settings.json", "r", encoding="utf-8") as file:
    settings = json.load(file)

loop = asyncio.get_event_loop()
bot = Bot(settings["telegram"]["token"], parse_mode="HTML")
dp = Dispatcher(bot, loop=loop, storage=MemoryStorage())


class Form(StatesGroup):

    getPhone = State()

    antispam = State()


@dp.callback_query_handler(lambda c: c.data == "oplata")
async def process_callback_button1(call: types.CallbackQuery):
    get_payment = (
        settings["telegram"]["qiwi"],
        settings["telegram"]["token_qiwi"],
        settings["telegram"]["private_key"],
        settings["telegram"]["qiwi_nickname"],
        "form",
        "True",
    )

    request = requests.session()
    request.headers["authorization"] = "Bearer " + get_payment[1]
    response_qiwi = request.get(
        f"https://edge.qiwi.com/payment-history/v2/persons/{get_payment[0]}/payments",
        params={"rows": 1, "operation": "IN"},
    )

    pay_amount = int(settings["telegram"]["price"])
    del_msg = await bot.send_message(
        call.from_user.id, "<b>‚ôª –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –±–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</b>"
    )
    min_input_qiwi = 1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö

    get_payments = (
        settings["telegram"]["qiwi"],
        settings["telegram"]["token_qiwi"],
        settings["telegram"]["private_key"],
        settings["telegram"]["qiwi_nickname"],
        "form",
        "True",
    )
    request = requests.Session()
    request.headers["authorization"] = "Bearer " + get_payments[1]
    response_qiwi = request.get(
        f"https://edge.qiwi.com/payment-history/v2/persons/{get_payments[0]}/payments",
        params={"rows": 1, "operation": "IN"},
    )
    if pay_amount >= min_input_qiwi:
        passwd = list("1234567890ABCDEFGHIGKLMNOPQRSTUVYXWZ")
        random.shuffle(passwd)
        random_chars = "".join([random.choice(passwd) for x in range(10)])
        generate_number_check = str(random.randint(100000000000, 999999999999))
        if get_payments[4] == "form":
            qiwi = QiwiP2P(get_payments[2])
            bill = qiwi.bill(
                bill_id=generate_number_check,
                amount=pay_amount,
                comment=generate_number_check,
            )
            way_pay = "Form"
            send_requests = bill.pay_url
            send_message = (
                f"<b>üÜô –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"‚ùó –£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è 30 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—á–µ—Ç–∞.\n"
                f"ü•ù –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É  <code>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</code>\n"
                f"üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{pay_amount}—Ä—É–±</code>\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"üîÑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <code>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</code>"
            )

        await bot.delete_message(call.message.chat.id, del_msg.message_id)
        delete_msg = await call.message.answer(
            "ü•ù <b>–ü–ª–∞—Ç—ë–∂ –±—ã–ª —Å–æ–∑–¥–∞–Ω.</b>",
        )
        await call.message.answer(
            send_message,
            reply_markup=keyboards.create_pay_qiwi_func(
                send_requests, generate_number_check, delete_msg.message_id, way_pay
            ),
        )


@dp.callback_query_handler(text_startswith="Pay:Form:")
async def check_qiwi_pay(call: CallbackQuery):
    receipt = call.data[9:].split(":")[0]
    message_id = call.data[9:].split(":")[1]
    get_payments = (
        settings["telegram"]["qiwi"],
        settings["telegram"]["token_qiwi"],
        settings["telegram"]["private_key"],
        settings["telegram"]["qiwi_nickname"],
        "form",
        "True",
    )

    if (
        get_payments[0] != "None"
        or get_payments[1] != "None"
        or get_payments[2] != "None"
    ):
        qiwi = QiwiP2P(get_payments[2])
        pay_comment = qiwi.check(
            bill_id=receipt
        ).comment  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–ª–∞—Ç–µ–∂–∞
        pay_status = qiwi.check(bill_id=receipt).status  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        pay_amount = float(
            qiwi.check(bill_id=receipt).amount
        )  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ä—É–±–ª—è—Ö
        pay_amount = int(pay_amount)
        if pay_status == "PAID":

            await bot.delete_message(call.message.chat.id, message_id)
            await call.message.delete()
            await call.message.answer(
                f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É {pay_amount}—Ä—É–±. –£–¥–∞—á–∏ ‚ù§</b>\n"
                f"<b>üìÉ –ß–µ–∫:</b> <code>+{receipt}</code>",
                reply_markup=keyboards.functions_default,
            )

            use_date = datetime.datetime.now()
            use_date = str(use_date + relativedelta(months=+1)).split(" ")[0]
            with sqlite3.connect(path_db) as db:
                db.execute(
                    "UPDATE users SET time_subscribers = ? WHERE user_id = ?",
                    (
                        use_date,
                        str(call.from_user.id),
                    ),
                )

        elif pay_status == "EXPIRED":
            await bot.edit_message_text(
                "<b>‚ùå –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –≤—ã—à–ª–æ. –ü–ª–∞—Ç—ë–∂ –±—ã–ª —É–¥–∞–ª—ë–Ω.</b>",
                call.message.chat.id,
                call.message.message_id,
            )
        elif pay_status == "WAITING":
            await call.message.answer("‚ùó –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.")
        elif pay_status == "REJECTED":
            await bot.edit_message_text(
                "<b>‚ùå –°—á—ë—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.</b>",
                call.message.chat.id,
                call.message.message_id,
            )
    else:

        await bot.answer_callback_query(
            call.id,
            "‚ùó –ò–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞,\n"
            "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.",
        )


@dp.callback_query_handler(Text(startswith="profile"))
async def index(call: types.CallbackQuery):
    await call.message.delete()
    with sqlite3.connect(path_db) as db:
        user = db.execute(
            "SELECT * FROM users WHERE user_id = ?", (str(call.from_user.id),)
        ).fetchall()

    with sqlite3.connect(path_db) as db:
        find_user = db.execute(
            "SELECT * FROM users WHERE user_id = ?",
            (str(call.from_user.id),),
        ).fetchall()
    check_subscribe = find_user[0][2]

    await call.message.answer(
        f"ü§ñ –ë–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–≥—Ä–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–º—Å –∏ –∑–≤–æ–Ω–∫–æ–≤ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö.\n\n‚òé –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: <code>10</code>\n"
        f"‚åö –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç: <code>{check_subscribe}</code>\nüë§ –õ–æ–≥–∏–Ω: @{call.from_user.username}\nüîë –ú–æ–π ID: {call.from_user.id}"
        f"\n\n‚ùî –ù–µ –∑–Ω–∞–µ—à—å —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?\n–ü—Ä–æ—á—Ç–∏ —Ä–∞–∑–¥–µ–ª '‚ùó –ü–æ–º–æ—â—å'",
        reply_markup=keyboards.MAIN(call.from_user.id),
    )


@dp.message_handler(text="/start")
async def send_message(message: types.Message):
    await message.answer(text="‚ö°")

    with sqlite3.connect(path_db) as db:
        find_user = db.execute(
            "SELECT * FROM users WHERE user_id = ?",
            (str(message.from_user.id),),
        ).fetchall()

        if len(find_user) <= 0:
            with sqlite3.connect(path_db) as db:
                db.execute(
                    """INSERT INTO users(user_id, user_login, time_subscribers, banned)
                    VALUES(?,?,?,?);""",
                    (
                        str(message.from_user.id),
                        message.from_user.username,
                        "0",
                        "0",
                    ),
                )

        with sqlite3.connect(path_db) as db:
            find_user = db.execute(
                "SELECT * FROM users WHERE user_id = ?",
                (str(message.from_user.id),),
            ).fetchall()
        check_subscribe = find_user[0][2]

        if len(check_subscribe) <= 2:
            await message.answer(
                "üõí –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n\n‚úÖ–ë–æ–ª–µ–µ 60 —Å–µ—Ä–≤–∏—Å–æ–≤\n‚úÖ–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –∏ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ç–∞–∫–∏ –Ω–∞ –Ω–æ–º–µ—Ä\n‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤–∞—Ç –ø—Ä–æ–∫—Å–∏ –õ–Æ–ë–û–ì–û –≤–∏–¥–∞\n‚úÖ –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å, –º—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç–∞–∫–∞—Ö\n",
                reply_markup=keyboards.oplata,
            )

        elif len(check_subscribe) > 2:
            with sqlite3.connect(path_db) as db:
                user = db.execute(
                    "SELECT * FROM users WHERE user_id = ?",
                    (str(message.from_user.id),),
                ).fetchall()

            await message.answer(
                f"ü§ñ –ë–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–≥—Ä–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–º—Å –∏ –∑–≤–æ–Ω–∫–æ–≤ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö.\n\n‚òé –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: <code>10</code>\n"
                f"‚åö –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç: <code>{check_subscribe}</code>\nüë§ –õ–æ–≥–∏–Ω: @{message.from_user.username}\nüîë –ú–æ–π ID: {message.from_user.id}"
                f"\n\n‚ùî –ù–µ –∑–Ω–∞–µ—à—å —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?\n–ü—Ä–æ—á—Ç–∏ —Ä–∞–∑–¥–µ–ª '‚ùó –ü–æ–º–æ—â—å'",
                reply_markup=keyboards.MAIN(message.from_user.id),
            )


@dp.callback_query_handler(Text(startswith="antispam"))
async def send_message(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n<code>–ë–µ–∑ +\n–ü—Ä–∏–º–µ—Ä: 79999999999</code>"
    )
    await Form.antispam.set()


@dp.message_handler(state=Form.antispam)
async def send_message(message: types.Message, state: FSMContext):

    phone = message.text

    with sqlite3.connect(path_db) as db:
        db.execute(
            "INSERT INTO whitelist(user_id, username, phone) VALUES (?,?,?)",
            (message.from_user.id, message.from_user.username, phone),
        )

    await message.delete()
    await message.answer(
        "–£—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å –≤–∞—à –Ω–æ–º–µ—Ä –≤ <b>WHITELIST</b>",
        reply_markup=keyboards.MAIN(message.from_user.id),
    )

    await state.finish()


@dp.callback_query_handler(Text(startswith="helpme"))
async def send_message(call: types.CallbackQuery):
    await call.answer(
        f"üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {settings['admin_nickname']}"
    )
    await call.message.answer(
        f"üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {settings['admin_nickname']}"
    )


@dp.callback_query_handler(Text(startswith="Zapusk"))
async def send_message(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer(
        "‚Äº –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ +\n–ü—Ä–∏–º–µ—Ä:\n<code>78255125961\n78252225261\n78555225961</code>"
    )
    await Form.getPhone.set()


@dp.message_handler(state=Form.getPhone)
async def send_message(message: types.Message, state: FSMContext):

    phone = message.text

    with sqlite3.connect(path_db) as db:
        tasks = db.execute(
            "SELECT * FROM tasks WHERE user_id = ?", (message.from_user.id,)
        ).fetchall()


        if len(tasks) >= 3:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–∞–º –Ω–∞ 4 –Ω–æ–º–µ—Ä–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ 1 –∏–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞"
            )

        else:
            db.execute(
                "INSERT INTO tasks(username, user_id, timer, active, phone) VALUES (?,?,?,?,?)",
                (message.from_user.username, message.from_user.id, 3600, "True", phone),
            )

            await message.answer(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ–º–±–µ—Ä –Ω–∞ –Ω–æ–º–µ—Ä: <code>{phone}</code>\n‚úÖ –ë–æ—Ç –≤—ã–∫–ª—é—á–∏—Ç —Å–ø–∞–º —á–µ—Ä–µ–∑ 3600 —Å–µ–∫—É–Ω–¥ (1 —á–∞—Å)"
            )

        await state.finish()


@dp.callback_query_handler(Text(startswith="my_rassilki"))
async def send_message(call: types.CallbackQuery, state: FSMContext):

    with sqlite3.connect(path_db) as db:
        tasks = db.execute(
            "SELECT * FROM tasks WHERE user_id = ? AND active = ?",
            (call.from_user.id, "False"),
        ).fetchall()

    generate = InlineKeyboardMarkup()


    for task in tasks:
        generate.row(InlineKeyboardButton(text=f"ID: {task[0]} | PHONE: {task[5]}", callback_data=f"attack:{task[0]}"))

    await call.message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ç–∞–∫–∏:", reply_markup=generate)


@dp.callback_query_handler(Text(startswith="attack"), state="*")
async def send_message(call: types.CallbackQuery, state: FSMContext):
    ID = call.data.split(":")[1]

    with sqlite3.connect(path_db) as db:
        db.execute("DELETE FROM tasks WHERE ID = ?", (ID,))

    await call.message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–ø–∞–º –Ω–∞ –Ω–æ–º–µ—Ä, ID –æ–ø–µ—Ä–∞—Ü–∏–∏: <b>{ID}</b>")

if __name__ == "__main__":
    executor.start_polling(dp)

